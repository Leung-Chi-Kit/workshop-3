from periphery import GPIO
import pyttsx3
from smbus2 import SMBus
import time
from pymongo import MongoClient
import datetime
import pygame 

# initialize the pygame library and prepare it for use
pygame.init() 
  
  # set window size to 400x300 pixels
window = pygame.display.set_mode((400, 300))   
# set the window name
pygame.display.set_caption('My Alert')   

  # create a font Arial with size 30 for text display
font = pygame.font.SysFont("Arial", 30)
# create a clock to control frame rate
clock = pygame.time.Clock()


# Your URI copied from MongoDB Atlas website
# Replace <password> with the password you created for your database user
uri = 'mongodb+srv://db:<password>@cluster0...:27017/'
client = MongoClient(uri)
db = client.database
collection = db.sensors
  
bus = SMBus(7)

engine = pyttsx3.init()
engine.say("Program started")
engine.runAndWait()

# set GPIO pin 146 as an output pin
red_led = GPIO(146, "out")
# turn on the red LED
red_led.write(True)
# wait for 3 seconds
time.sleep(3)
# turn off the red LED
red_led.write(False)
# Exercise: Turning on and off the Green LED
# Fill out the ... below

# set GPIO pin 150 as an output pin
green_led = GPIO(150, "out")
# turn on the green LED
green_led.write(True)
# wait for 3 seconds
time.sleep(3)
# turn off the green LED
green_led.write(False)

  
# The code block inside while True loop repeats continuously until 
# you press Ctrl+C in the terminal
while True:
   # trigger the sensor to do measurement
   bus.write_i2c_block_data(0x38, 0xAC, [0x33, 0x00]) 
   # wait for 0.5 seconds
   time.sleep(0.5)
   # read data from the sensor
   data = bus.read_i2c_block_data(0x38, 0x00, 8)

   temp = ((data[3] & 0x0F) << 16) | (data[4] << 8) | data[5]
   humi = ((data[1] << 16) | (data[2] << 8) | data[3]) >> 4

   temperature = temp / (2**20) * 200 - 50
   print(u'Temperature: {0:.1f}째C'.format(temperature))
   engine = pyttsx3.init()
   engine.say(u'Temperature is now {0:.1f}째'.format(temperature))
   engine.runAndWait()

   humidity = humi / (2**20) * 100
   print(u'Humidity: {0:.1f}%'.format(humidity))
  # Exercise: Output humidity value with speech
  # Fill out the ... below
  engine = pyttsx3.init()
  engine.say(u'Humidity is now {0:.1f}%'.format(humidity))
  engine.runAndWait()

   record = {
      "sensor_id": 1,
      "temp": temperature,
      "humi": humidity,
      "date": datetime.datetime.now(),
   }

   db.sensors.insert_one(record)

  
# The code block inside while True loop repeats continuously until 
# you press Ctrl+C in the terminal
while True:
    # process any pending events to ensure the application remains responsive
    pygame.event.pump()
        if lastRecord['temp'] > 28:
       window.fill((255, 0, 0))  # red background
      else:
       window.fill((255, 255, 255)) # white background
      # create a text surface with black color, RGB code (0, 0, 0)
    tempText = font.render("Temperature: {0:.1f}째C".format(lastRecord['temp']), True, (0, 0, 0))    

    # draw the tempText surface at the position (10, 10)
    window.blit(tempText, (10, 10))
      # Exercise: Displaying humidity value in the window
    # Fill out the ... below

    # create a text surface with black color, RGB code (0, 0, 0)
    humiText = font.render("Humidity: {0:.1f}%".format(lastRecord['humi']), True, (0, 0, 0)) 

    # draw the humiText surface at the position (10, 40)
    window.blit(...)
    # update the display window
    pygame.display.update()      
    # set the frame rate to 1 frame per second
    clock.tick(1) 
      
# Get the last record from the collection (sorted by "date")
lastRecord = collection.find().sort("date", -1).limit(1)[0]   
  
  print("Temperature: {0:.1f} 째C".format(lastRecord['temp']))

  # Exercise: Retrieving the humidity data from the cloud database
# Fill out the ... below

print("Humidity: {0:.1f} %".format(lastRecord['humi']))
  
  if temperature > 28:
    print("Temperature is too high")
    # turn on the red LED
    red_led.write(True)
else:
    print("Temperature is normal")
    # turn off the red LED
    red_led.write(False)
  
   # wait for 60 seconds
   time.sleep(60) 
